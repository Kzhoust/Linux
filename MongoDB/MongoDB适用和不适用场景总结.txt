
对比传统关系型数据库，NoSQL有着非常显著的性能和扩展性优势，然而这些优点却建立在一些关键功能的丢失之上，比如事务、join等。

MongoDB 的主要目标是在键/值存储方式（提供了高性能和高度伸缩性）和传统的RDBMS 系统（具有丰富的功能）之间架起一座桥梁，它集两者的优势于一身。

根据官方网站的描述，Mongo 适用于以下场景。
● 网站数据：Mongo 非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。
● 缓存：由于性能很高，Mongo 也适合作为信息基础设施的缓存层。在系统重启之后，由Mongo 搭建的持久化缓存层可以避免下层的数据源过载。
● 大尺寸、低价值的数据：使用传统的关系型数据库存储一些数据时可能会比较昂贵，在此之前，很多时候程序员往往会选择传统的文件进行存储。
● 高伸缩性的场景：Mongo 非常适合由数十或数百台服务器组成的数据库，Mongo 的路线图中已经包含对MapReduce 引擎的内置支持。
● 用于对象及JSON 数据的存储：Mongo 的BSON 数据格式非常适合文档化格式的存储及查询。

MongoDB 的使用也会有一些限制，例如，它不适合于以下几个地方。
● 高度事务性的系统：例如，银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。
● 传统的商业智能应用：针对特定问题的BI 数据库会产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。
● 需要SQL 的问题。

三、最终总结：

Mongodb适合做实时监控数据，在5亿条数据中返回1万条数据只用几十毫秒，实时监控时就可以把每秒的监控数据返回到前台，达到1秒刷新一次页面的目的。

但是Mongodb不适合做数据仓库，并且对于聚合操作较多的统计分析场景也不适用，甚至对Mongodb数据库的ETL操作也要精心设计它的数据才能被纳入数据仓库中。

并且Mongodb的内存管理使用了“内存映射存储引擎”，简单说来就是把库文件整个的映射到内存中，那就意味着如果文件大于内存的话，服务器的内存将几乎全部被占用掉，这个问题几乎没有本质的解决办法，所以使用时一定要考虑使用场景。


https://www.zhihu.com/question/36110917
