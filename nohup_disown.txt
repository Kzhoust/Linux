

# nohup ping localhost > /dev/null & 
# ping localhost > /dev/null &
# jobs									查看当前终端下的后台进程：

让Linux的进程不受终端影响 有两种方式：
1. command & ： 后台运行，你关掉终端会停止运行
2. nohup command & ： 后台运行，你关掉终端也会继续运行

nohup command 登录后执行command,logout后,此command不受影响的继续运行
command & 把任务放在后台 ,用户logout后,此command也被kill掉

1.nohup
顾名思义，nohup的用途就是让提交的命令忽略所有的hangup信号。

1)nohup保障进程不会被hangup信号异常中断；
2)将任务放置到后台运行，不占用当前的终端；
3)将错误输出也打印到log中，默认>只有标准输出，错误输出没有。

终止当前正在前台运行的进程：ctrl +c


disown是bash内部命令，nohup是外部命令
disown跟bg,fg一样是针对job进行操作，nohup是针对命令操作
disown -h 和nohup一样，在退出bash后，把进程的控制权都交给init

disown
场景：
我们已经知道，如果事先在命令前加上 nohup 或者 setsid 就可以避免 HUP 信号的影响。但是如果我们未加任何处理就已经提交了命令，该如何补救才能让它避免 HUP 信号的影响呢？
解决方法：
这时想加 nohup 或者 setsid 已经为时已晚，只能通过作业调度和 disown 来解决这个问题了。让我们来看一下 disown 的帮助信
以看出，我们可以用如下方式来达成我们的目的。
用disown -h jobspec 来使某个作业忽略HUP信号。
用disown -ah 来使所有的作业都忽略HUP信号。
用disown -rh 来使正在运行的作业忽略HUP信号。

  


